{{- include "marklogic.checkInputError" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "marklogic.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "marklogic.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "marklogic.headlessServiceName" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  selector:
    matchLabels:
      {{- include "marklogic.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "marklogic.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "marklogic.serviceAccountName" . }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8}}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- toYaml . | nindent 6}}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      {{- if or ( ne .Values.bootstrapHostName "") (eq .Values.tls.enableOnDefaultAppServers true ) }}
      initContainers: 
      {{- if eq .Values.tls.enableOnDefaultAppServers true }}
      - name: copy-certs
        image: {{ .Values.initContainers.copyCerts.image | quote }}
        imagePullPolicy: {{ .Values.initContainers.copyCerts.pullPolicy | quote }}
        command:
          - bash
          - '-c'
          - |
            MARKLOGIC_ADMIN_USERNAME="$(< /run/secrets/ml-secrets/username)"            
            MARKLOGIC_ADMIN_PASSWORD="$(< /run/secrets/ml-secrets/username)"
            log () {
              local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
              echo "${TIMESTAMP}  $@"
            }
            if [[ -d "/tmp/server-cert-secrets" ]]; then
              certType="named"
            else
              certType="self-signed"
            fi
            log "Info: [copy-certs] Proceeding with $certType certificate flow."
            host_FQDN="$POD_NAME.$MARKLOGIC_FQDN_SUFFIX"
            log "Info: [copy-certs] FQDN for this server: $host_FQDN"
            foundMatchingCert="false"
            if [[ "$certType" == "named" ]]; then
              cp -f /tmp/ca-cert-secret/* /run/secrets/marklogic-certs/;
              cert_paths=$(find /tmp/server-cert-secrets/tls_*.crt)
              for cert_path in $cert_paths; do
                cert_cn=$(openssl x509 -noout -subject -in $cert_path | sed -n 's/.*CN = \([^,]*\).*/\1/p')
                log "Info: [copy-certs] FQDN for the certificate: $cert_cn"
                if [[ "$host_FQDN" == "$cert_cn" ]]; then
                  log "Info: [copy-certs] found certificate for the server"
                  foundMatchingCert="true"
                  cp $cert_path /run/secrets/marklogic-certs/tls.crt
                  pkey_path=$(echo "$cert_path" | sed "s:.crt:.key:")
                  cp $pkey_path /run/secrets/marklogic-certs/tls.key
                  if [[ ! -e "$pkey_path" ]]; then
                    log "Error: [copy-certs] private key tls.key for certificate $cert_cn is not found. Exiting."
                    exit 1
                  fi

                  # verify the tls.crt and cacert.pem is valid, otherwise exit
                  openssl verify -CAfile /run/secrets/marklogic-certs/cacert.pem /run/secrets/marklogic-certs/tls.crt
                  if [[ $? -ne 0 ]]; then
                    log "Error: [copy-certs] Server certificate tls.crt verification with cacert.pem failed. Exiting."
                    exit 1
                  fi
                  # verify the tls.crt and tls.key is matching, otherwise exit
                  privateKeyMD5=$(openssl rsa -modulus -noout -in /run/secrets/marklogic-certs/tls.key | openssl md5)
                  publicKeyMD5=$(openssl x509 -modulus -noout -in /run/secrets/marklogic-certs/tls.crt | openssl md5)
                  if [[ -z "privateKeyMD5" ]] || [[ "$privateKeyMD5" != "$publicKeyMD5" ]]; then
                    log "Error: [copy-certs] private key tls.key and server certificate tls.crt are not matching. Exiting."
                    exit 1
                  fi
                  log "Info: [copy-certs] certificate and private key are valid."
                  break
                fi
              done
              if [[ $foundMatchingCert == "false" ]]; then
                if [[ $POD_NAME = *"-0" ]]; then
                  log "Error: [copy-certs] Failed to find matching certificate for the bootstrap server. Exiting."
                  exit 1
                else 
                  log "Error: [copy-certs] Failed to find matching certificate for the non-bootstrap server. Continuing with temporary certificate for this host. Please update the certificate for this host later."
                fi
              fi
            elif [[ "$certType" == "self-signed" ]]; then
              if [[ $POD_NAME != *"-0" ]] || [[ $MARKLOGIC_CLUSTER_TYPE == "non-bootstrap" ]]; then
                log "Info: [copy-certs] Getting CA for bootstrap host"
                cd /run/secrets/marklogic-certs/
                echo quit | openssl s_client -showcerts -servername "${MARKLOGIC_BOOTSTRAP_HOST}" -showcerts -connect "${MARKLOGIC_BOOTSTRAP_HOST}":8000 2>&1 < /dev/null | sed -n '/-----BEGIN/,/-----END/p' > cacert.pem
              fi
            else 
              log "Error: [copy-certs] unknown certType: $certType"
              exit 1
            fi
        volumeMounts:
        {{- if .Values.tls.certSecretNames }}
          - name: ca-cert-secret
            mountPath: /tmp/ca-cert-secret/
          - name: server-cert-secrets
            mountPath: /tmp/server-cert-secrets/
        {{- end }}
          - name: certs
            mountPath: /run/secrets/marklogic-certs/
          - name: mladmin-secrets
            mountPath: /run/secrets/ml-secrets/
            readOnly: true
        env: 
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MARKLOGIC_ADMIN_USERNAME_FILE
          value: "ml-secrets/username"
        - name: MARKLOGIC_ADMIN_PASSWORD_FILE
          value: "ml-secrets/password"
        envFrom:
        - configMapRef:
            name: {{ include "marklogic.fullname" . }}
      {{- end }}
      {{- if ne .Values.bootstrapHostName "" }}
      - name: configure-group
        image: {{ .Values.initContainers.configureGroup.image | quote }} 
        imagePullPolicy: {{ .Values.initContainers.configureGroup.pullPolicy | quote }}
        volumeMounts:
            - name: mladmin-secrets
              mountPath: /run/secrets/ml-secrets
              readOnly: true
        command:
          - sh
          - '-c'
          - |
            MARKLOGIC_ADMIN_USERNAME=`cat /run/secrets/ml-secrets/username`
            MARKLOGIC_ADMIN_PASSWORD=`cat /run/secrets/ml-secrets/password`
            log () {
                      local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
                      echo "${TIMESTAMP}  $@"
                    }
            log "Info: [initContainer] Begin configure-group execution"
            if [[ $POD_NAME != *-0 ]]; then
              log "Info: [initContainer] Skipping creation of group $MARKLOGIC_GROUP as $POD_NAME is not the first node in the group."
              exit 0
            fi
            HTTP_PROTOCOL="http"
            HTTPS_OPTION=""
            if [[ "$MARKLOGIC_JOIN_TLS_ENABLED" == "true" ]]; then
              HTTP_PROTOCOL="https"
              HTTPS_OPTION="-k"
            fi
            HOST_RESP_CODE=`curl --anyauth -m 20 -s ${HTTPS_OPTION} -o /dev/null -w "%{http_code}" -X GET ${HTTP_PROTOCOL}://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/hosts --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD}`
            log "Info: HOST_RESP_CODE $HOST_RESP_CODE"
            if [[ ${HOST_RESP_CODE} -ne 200 ]]; then
              log "Error: [initContainer] Bootstrap host $MARKLOGIC_BOOTSTRAP_HOST not found, exiting Init container."
              exit 1
            fi
            GROUP_CFG_TEMPLATE='{"group-name":"%s", "xdqp-ssl-enabled":"%s"}'
            GROUP_CFG=$(printf "$GROUP_CFG_TEMPLATE" "$MARKLOGIC_GROUP" "$XDQP_SSL_ENABLED") 
            GROUP_RESP_CODE=`curl --anyauth -m 20 -s -o /dev/null ${HTTPS_OPTION} -w "%{http_code}" -X GET ${HTTP_PROTOCOL}://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/groups/${MARKLOGIC_GROUP} --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD}`
            if [[ ${GROUP_RESP_CODE} -eq 200 ]]; then
              log "Info: [initContainer] Skipping creation of group $MARKLOGIC_GROUP as it already exists on the MarkLogic cluster." 
              exit 0
            fi
            log "Info: [initContainer] Group $MARKLOGIC_GROUP does not exist, configuring group $MARKLOGIC_GROUP on the MarkLogic cluster."
            res_code=`curl --retry 5 --retry-all-errors --retry-max-time 60 --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD} -m 20 -s -w '%{http_code}' -X POST ${HTTPS_OPTION} -d "${GROUP_CFG}" -H "Content-type: application/json" ${HTTP_PROTOCOL}://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/groups`
            if [[ ${res_code} -eq 201 ]]; then
              log "Info: [initContainer] Successfully configured group $MARKLOGIC_GROUP on the MarkLogic cluster."
            else
              log "Info: [initContainer] Expected response code 201, got $res_code"
              exit 1
            fi
            log "Info: [initContainer] Group $MARKLOGIC_GROUP has been created, configuring App-server App-Services in group $MARKLOGIC_GROUP on the MarkLogic cluster."
            res_code=`curl --retry 5 --retry-all-errors --retry-max-time 60 --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD} -m 20 -s ${HTTPS_OPTION} -w '%{http_code}' -X POST -d '{"server-name":"App-Services", "root":"/", "port":8000,"modules-database":"Modules", "content-database":"Documents", "error-handler":"/MarkLogic/rest-api/8000-error-handler.xqy", "url-rewriter":"/MarkLogic/rest-api/8000-rewriter.xml"}' -H "Content-type: application/json" "${HTTP_PROTOCOL}://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/servers?group-id=${MARKLOGIC_GROUP}&server-type=http"`
            if [[ ${res_code} -eq 201 ]]; then
              log "Info: [initContainer] Successfully configured App-server App-Services into group $MARKLOGIC_GROUP on the MarkLogic cluster."
            else
              log "Info: [initContainer] Expected response code 201, got $res_code"
              exit 1
            fi                    
        env: 
        - name: MARKLOGIC_ADMIN_USERNAME_FILE
          value: "ml-secrets/username"
        - name: MARKLOGIC_ADMIN_PASSWORD_FILE
          value: "ml-secrets/password"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: {{ include "marklogic.fullname" . }}
      {{- end }}
      {{- end }}
      containers:
        - name: marklogic-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy}}
          volumeMounts:
            - name: datadir
              mountPath: /var/opt/MarkLogic
            {{- if .Values.additionalVolumeMounts }}
              {{- toYaml .Values.additionalVolumeMounts | nindent 12 }}
            {{- end }}
            - name: mladmin-secrets
              mountPath: /run/secrets/ml-secrets
              readOnly: true
            {{- if .Values.tls.enableOnDefaultAppServers }}
            - name: certs
              mountPath: /run/secrets/marklogic-certs/
            {{- end }}
            {{- if .Values.hugepages.enabled }}
            - name: huge-pages
              mountPath: {{ .Values.hugepages.mountPath }}
            {{- end }} 
            - name: scripts
              mountPath: /tmp/scripts           
          env:
            - name: MARKLOGIC_ADMIN_USERNAME_FILE
              value: "ml-secrets/username"
            - name: MARKLOGIC_ADMIN_PASSWORD_FILE
              value: "ml-secrets/password"
            {{- if .Values.auth.walletPassword }}
            - name: MARKLOGIC_WALLET_PASSWORD_FILE
              value: ml-secrets/wallet-password
            {{- end }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: INSTALL_CONVERTERS
              value: {{ .Values.enableConverters | quote }}
            - name: LICENSE_KEY
              value: {{ .Values.license.key | quote }}
            - name: LICENSEE
              value: {{ .Values.license.licensee | quote }}
            - name: REALM
              value: {{ .Values.realm  | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "marklogic.fullname" . }}
          ports:
            - name: health-check
              containerPort: 7997
              protocol: TCP
            - name: xdqp-port1
              containerPort: 7998
              protocol: TCP
            - name: xdqp-port2
              containerPort: 7999              
              protocol: TCP
            - name: app-services
              containerPort: 8000
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
            - name: manage
              containerPort: 8002
              protocol: TCP
            {{- if .Values.additionalContainerPorts }}
              {{- toYaml .Values.additionalContainerPorts | nindent 12 }}
            {{- end }}
          lifecycle:
            {{- if or (eq .Values.bootstrapHostName "") (eq .Values.tls.enableOnDefaultAppServers true) }}
            postStart:
              exec:
                command:
                  - bash
                  - '-c'
                  - |
                    MARKLOGIC_ADMIN_USERNAME="$(< /run/secrets/ml-secrets/username)"
                    MARKLOGIC_ADMIN_PASSWORD="$(< /run/secrets/ml-secrets/password)"

                    log () {
                      local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
                      pid=$(pgrep start.marklogic)
                      # Check to make sure pod doesn't terminate if PID value is empty for any reason
                      # If PID value is empty postStart hook logs are not recorded
                      if [ -n "$pid" ]; then
                          echo "${TIMESTAMP} $@" > /proc/$pid/fd/1
                      fi
                    }

                    log "Info: [poststart] Poststart Hook Execution"

                    restart_check () {
                      local retry_count LAST_START timestamp=$1
                      LAST_START=$(curl -s --anyauth --user "${MARKLOGIC_ADMIN_USERNAME}":"${MARKLOGIC_ADMIN_PASSWORD}" "http://${MARKLOGIC_BOOTSTRAP_HOST}:8001/admin/v1/timestamp")
                      for ((retry_count = 0; retry_count < 5; retry_count = retry_count + 1)); do
                        if [[ "${timestamp}" == "${LAST_START}" ]] || [[ -z "${LAST_START}" ]]; then
                            sleep 10
                            LAST_START=$(curl -s --anyauth --user "${MARKLOGIC_ADMIN_USERNAME}":"${MARKLOGIC_ADMIN_PASSWORD}" "http://${MARKLOGIC_BOOTSTRAP_HOST}:8001/admin/v1/timestamp")
                        else
                            log "Info: [poststart] MarkLogic host: ${MARKLOGIC_BOOTSTRAP_HOST} has restarted."
                            return 0
                        fi
                      done
                      log "Error: [poststart] Failed to restart MarkLogic host: ${MARKLOGIC_BOOTSTRAP_HOST}"
                      exit 1
                    }

                    # Begin Group Configuration
                    if [[ $POD_NAME == *-0 ]] && [[ $MARKLOGIC_CLUSTER_TYPE == "bootstrap" ]]; then
                      [ -f /var/opt/MarkLogic/group_cfg ] && current_group_cfg=$(cat /var/opt/MarkLogic/group_cfg)
                      if [ "${MARKLOGIC_GROUP}:${XDQP_SSL_ENABLED}" = "${current_group_cfg}" ]; then
                          log "Info: [poststart] Group config has not changed, poststart hook complete"
                          exit 0
                      fi

                      log "Info: [poststart] Begin group configuration."
                      while [ ! -f /var/opt/MarkLogic/ready ]; do
                        log "[poststart] waiting for MarkLogic server to be ready"
                        sleep 5s
                      done

                      GROUP_CFG_TEMPLATE='{"group-name":"%s", "xdqp-ssl-enabled":"%s"}'
                      GROUP_CFG=$(printf "$GROUP_CFG_TEMPLATE" "$MARKLOGIC_GROUP" "$XDQP_SSL_ENABLED")

                      log "Info: [poststart] Updating group configuration: ${GROUP_CFG}"
                      GROUP_RESP_CODE=`curl --retry 5 --retry-max-time 60 -o /tmp/restart_payload.xml -w "%{http_code}" --anyauth -m 20 -s -X PUT -H "Content-type: application/json" -d "${GROUP_CFG}" http://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/groups/Default/properties --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD}`
                    
                      # check whether MarkLogic has restarted
                      if [[ ${GROUP_RESP_CODE} -eq 202 ]] || [[ ${GROUP_RESP_CODE} -eq 204 ]]; then
                        log "Info: [poststart] Successfully configured properties for $MARKLOGIC_GROUP group on the MarkLogic cluster."
                        TIMESTAMP=$(< /tmp/restart_payload.xml grep "last-startup" | sed 's%^.*<last-startup.*>\(.*\)</last-startup>.*$%\1%')
                        rm  -f /tmp/restart_payload.xml
                        if [[ -n ${TIMESTAMP} ]]; then
                          restart_check ${TIMESTAMP}
                        fi
                        if [[ $MARKLOGIC_IMAGE_TYPE == "rootless" ]]; then
                          sh -c 'echo -n '"${MARKLOGIC_GROUP}:${XDQP_SSL_ENABLED}"' > /var/opt/MarkLogic/group_cfg'
                        else
                          sudo sh -c 'echo -n '"${MARKLOGIC_GROUP}:${XDQP_SSL_ENABLED}"' > /var/opt/MarkLogic/group_cfg'
                        fi
                        log "Info: [poststart] ${GROUP_CFG} saved"
                      else
                        log "Error: [poststart] Failed to configure properties for $MARKLOGIC_GROUP group.
                        log "Error: [poststart] Expected response code 202 or 204, got "${GROUP_RESP_CODE}"
                        exit 1
                      fi
                    else
                      log "Info: [poststart] This is not bootstrap host. Skipping group configuration."
                    fi
                    # End Group Configuration

                    if [[ "$MARKLOGIC_JOIN_TLS_ENABLED" == "true" ]]; then
                      https_error_message="You have attempted to access an HTTPS server using HTTP."
                      resp=$(curl -s http://localhost:8001)
                      if [[ "$resp" == *"$https_error_message"* ]]; then
                          log "Info: [poststart] MarkLogic server has already configured HTTPS"
                        exit 0
                      else 
                        log "Info: [poststart] MARKLOGIC_JOIN_TLS_ENABLED is set to true, configuring SSL"
                      fi
                    else
                      log "Info: [poststart] MARKLOGIC_JOIN_TLS_ENABLED is set to false"
                      exit 0
                    fi

                    while [ ! -f /var/opt/MarkLogic/ready ]; do
                      log "[poststart] waiting for MarkLogic server to be ready"
                      sleep 5s
                    done

                    AUTH_CURL="curl --anyauth --user $MARKLOGIC_ADMIN_USERNAME:$MARKLOGIC_ADMIN_PASSWORD -m 20 -s "
                    cd ~ 
                    if [[ -e "/run/secrets/marklogic-certs/tls.crt" ]]; then
                      log "Info: [poststart] Configuring named certificates on host"
                      certType="named"
                    else 
                      log "Info: [poststart] Configuring self-signed certificates on host"
                      certType="self-signed"
                    fi
                    log "Info: [poststart] certType in postStart: $certType"

                    cat <<'EOF' > defaultCertificateTemplate.json
                    {
                      "template-name": "defaultTemplate",
                      "template-description": "defaultTemplate",
                      "key-type": "rsa",
                      "key-options": {
                        "key-length": "2048"
                      },  
                      "req": {
                        "version": "0",
                        "subject": {
                          "organizationName": "MarkLogic"
                        }
                      }
                    }
                    EOF
                    
                    if [[ $POD_NAME == *-0 ]] && [[ $MARKLOGIC_CLUSTER_TYPE == "bootstrap" ]]; then
                      log "Info: [poststart] creating default certificate Template"
                      response=$($AUTH_CURL -X POST --header "Content-Type:application/json" -d @defaultCertificateTemplate.json http://localhost:8002/manage/v2/certificate-templates)
                      sleep 5s
                      log "Info: [poststart] done creating default certificate Template"
                    fi
                    
                    log "Info: [poststart] creating insert-host-certificates.json"
                    cat <<'EOF' > insert-host-certificates.json
                    {
                      "operation": "insert-host-certificates",
                      "certificates": [
                        {
                          "certificate": {
                            "cert": "CERT",
                            "pkey": "PKEY"
                          }
                        }
                      ]
                    }
                    EOF

                    log "Info: [poststart] creating generateCA.xqy"
                    cat <<'EOF' > generateCA.xqy
                    xquery=
                        xquery version "1.0-ml"; 
                        import module namespace pki = "http://marklogic.com/xdmp/pki" 
                            at "/MarkLogic/pki.xqy";
                        let $tid := pki:template-get-id(pki:get-template-by-name("defaultTemplate"))
                        return
                            pki:generate-template-certificate-authority($tid, 365)
                    EOF

                    log "Info: [poststart] creating createTempCert.xqy"
                    cat <<'EOF' > createTempCert.xqy
                    xquery= 
                      xquery version "1.0-ml"; 
                      import module namespace pki = "http://marklogic.com/xdmp/pki" 
                          at "/MarkLogic/pki.xqy";
                      import module namespace admin = "http://marklogic.com/xdmp/admin"
                          at "/MarkLogic/admin.xqy";
                      let $tid := pki:template-get-id(pki:get-template-by-name("defaultTemplate"))
                      let $config := admin:get-configuration()
                      let $hostname := admin:host-get-name($config, admin:host-get-id($config, xdmp:host-name()))
                      return
                        pki:generate-temporary-certificate-if-necessary($tid, 365, $hostname, (), ())
                    EOF
                    
                    log "Info: [poststart] inserting certificates $certType"
                    if [[ "$certType" == "named" ]]; then
                      log "Info: [poststart] creating named certificate"
                      cert_path="/run/secrets/marklogic-certs/tls.crt"
                      pkey_path="/run/secrets/marklogic-certs/tls.key"
                      cp insert-host-certificates.json insert_cert_payload.json
                      cert="$(<$cert_path)"
                      cert="${cert//$'\n'/}"
                      pkey="$(<$pkey_path)"
                      pkey="${pkey//$'\n'/}"

                      sed -i "s|CERT|$cert|" insert_cert_payload.json
                      sed -i "s|CERTIFICATE-----|CERTIFICATE-----\\\\n|" insert_cert_payload.json
                      sed -i "s|-----END CERTIFICATE|\\\\n-----END CERTIFICATE|" insert_cert_payload.json
                      sed -i "s|PKEY|$pkey|" insert_cert_payload.json
                      sed -i "s|PRIVATE KEY-----|PRIVATE KEY-----\\\\n|" insert_cert_payload.json
                      sed -i "s|-----END RSA|\\\\n-----END RSA|" insert_cert_payload.json
                      sed -i "s|-----END PRIVATE|\\\\n-----END PRIVATE|" insert_cert_payload.json
                      
                      log "Info: [poststart] inserting following certificates for $cert_path for $MARKLOGIC_CLUSTER_TYPE"

                      if [[ $POD_NAME == *-0 ]]; then
                        res=$($AUTH_CURL -X POST --header "Content-Type:application/json" -d @insert_cert_payload.json http://localhost:8002/manage/v2/certificate-templates/defaultTemplate 2>&1)
                      else 
                        res=$($AUTH_CURL -k  -X POST --header "Content-Type:application/json" -d @insert_cert_payload.json https://localhost:8002/manage/v2/certificate-templates/defaultTemplate 2>&1)
                      fi
                      log "Info: [poststart] $res"
                      sleep 5s
                    fi

                    if [[ $POD_NAME == *-0 ]]; then
                      if [[ $MARKLOGIC_CLUSTER_TYPE == "bootstrap" ]]; then
                        log "Info: [poststart] Generating Temporary CA Certificate"
                        $AUTH_CURL -X POST -i -d @generateCA.xqy \
                        -H "Content-type: application/x-www-form-urlencoded" \
                        -H "Accept: multipart/mixed; boundary=BOUNDARY" \
                        http://localhost:8000/v1/eval
                        sleep 5s
                      fi
                    
                      log "Info: [poststart] enabling app-servers for HTTPS"
                      # Manage need be put in the last in the array to make sure http works for all the requests
                      appServers=("App-Services" "Admin" "Manage")
                      for appServer in ${appServers[@]}; do
                        log "configuring SSL for App Server $appServer"
                        curl --anyauth --user $MARKLOGIC_ADMIN_USERNAME:$MARKLOGIC_ADMIN_PASSWORD \
                          -X PUT -H "Content-type: application/json" -d '{"ssl-certificate-template":"defaultTemplate"}' \
                        http://localhost:8002/manage/v2/servers/${appServer}/properties?group-id=${MARKLOGIC_GROUP}
                        sleep 5s
                      done
                      log "Info: [poststart] Configure HTTPS in App Server finished"

                      if [[ "$certType" == "self-signed" ]]; then
                        log "Info: [poststart] Generate temporary certificate if necessary"
                        $AUTH_CURL -k -X POST -i -d @createTempCert.xqy -H "Content-type: application/x-www-form-urlencoded" \
                        -H "Accept: multipart/mixed; boundary=BOUNDARY" https://localhost:8000/v1/eval
                      fi
                    fi
                    
                    log "Info: [poststart] removing cert keys"
                    rm -f /run/secrets/marklogic-certs/*.key

                    log "Info: [poststart] Poststart Hook Execution Completed"
            {{- end }}
            preStop:
              exec:
                command:
                  - bash
                  - '-c'
                  - |
                    MARKLOGIC_ADMIN_USERNAME="$(< /run/secrets/ml-secrets/username)"
                    MARKLOGIC_ADMIN_PASSWORD="$(< /run/secrets/ml-secrets/password)"

                    log () {
                      local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
                      # Check to make sure pod doesn't terminate if PID value is empty for any reason
                      # If PID value is empty preStart hook logs are not recorded
                      if [ -n "$pid" ]; then
                          echo "${TIMESTAMP} $@" > /proc/$pid/fd/1
                      fi
                    }

                    pid=$(pgrep start.marklogic)
                    log "Info: [prestop] Prestop Hook Execution"

                    my_host=$(hostname -f)

                    HTTP_PROTOCOL="http"
                    HTTPS_OPTION=""
                    if [[ "$MARKLOGIC_JOIN_TLS_ENABLED" == "true" ]]; then
                      HTTP_PROTOCOL="https"
                      HTTPS_OPTION="-k"
                    fi
                    log "Info: [prestop] MarkLogic Pod Hostname: "$my_host
                    for ((i = 0; i < 5; i = i + 1)); do
                        res_code=$(curl --anyauth --user $MARKLOGIC_ADMIN_USERNAME:$MARKLOGIC_ADMIN_PASSWORD \
                            -o /dev/null -m 10 -s -w %{http_code} \
                            -i -X POST ${HTTPS_OPTION} --data "state=shutdown&failover=true" \
                            -H "Content-type: application/x-www-form-urlencoded" \
                            ${HTTP_PROTOCOL}://localhost:8002/manage/v2/hosts/$my_host?format=json)

                        if [[ ${res_code} -eq 202 ]]; then
                            log "Info: [prestop] Host shut down response code: "$res_code

                            while (true)
                            do
                              ml_status=$(service MarkLogic status)
                              log "Info: [prestop] MarkLogic Status: "$ml_status
                              if [[ "$ml_status" =~ "running" ]]; then
                                  sleep 5s
                                  continue
                              else
                                  break
                              fi
                            done
                            break
                        else
                            log "ERROR: [prestop] Retry Attempt: "$i
                            log "ERROR: [prestop] Host shut down expected response code 202, got "$res_code
                            sleep 10s
                        fi
                    done
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - /tmp/scripts/liveness-probe.sh
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.logCollection.enabled }}
        - name: fluent-bit
          image: {{ .Values.logCollection.image }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: datadir
              mountPath: /var/opt/MarkLogic
            {{- if .Values.additionalVolumeMounts }}
              {{- toYaml .Values.additionalVolumeMounts | nindent 12 }}
            {{- end }}
            - name: {{ include "marklogic.fullname" . }}-fb-config-map
              mountPath: /fluent-bit/etc/
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources: {{- toYaml .Values.logCollection.resources | nindent 12 }}
        {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8}}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      dnsConfig:
        searches:
          - {{ include "marklogic.headlessURL" . }}
      volumes:
        {{- if .Values.tls.enableOnDefaultAppServers }}
        - name: certs
          emptyDir: {}
        {{- if .Values.tls.certSecretNames }}
        - name: ca-cert-secret
          secret:
            secretName: {{ .Values.tls.caSecretName }}
        - name: server-cert-secrets
          projected:
            sources:
            {{-  range $i, $secretName := .Values.tls.certSecretNames }}
              - secret:
                  name: {{ $secretName | quote }}
                  items: 
                    - key: tls.crt
                      path: tls_{{$i}}.crt
                    - key: tls.key
                      path: tls_{{$i}}.key
            {{- end }}
        {{- end }}
        {{- end }}
        - name: mladmin-secrets
          secret:
            secretName: {{ include "marklogic.authSecretNameToMount" . }}
        - name: scripts
          configMap:
            name: {{ .Release.Name }}-scripts
            defaultMode: 0755
        {{- if .Values.logCollection.enabled }}
        - name: {{ include "marklogic.fullname" . }}-fb-config-map
          configMap:
            name: {{ include "marklogic.fullname" . }}-fb-config-map
        {{- end }}
        {{- if .Values.hugepages.enabled }}
        - name: huge-pages
          emptyDir:
            medium: HugePages
        {{- end }}  
        {{- if not .Values.persistence.enabled }}
        - name: datadir
          emptyDir: {}
        {{- end }}
        {{- if .Values.additionalVolumes }}
        {{- toYaml .Values.additionalVolumes | nindent 8 }}
        {{- end }}
  {{- if or .Values.persistence.enabled .Values.additionalVolumeClaimTemplates }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        labels: 
          {{- include "marklogic.selectorLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote}}
          {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end}}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
    {{- if .Values.additionalVolumeClaimTemplates }}
    {{- toYaml .Values.additionalVolumeClaimTemplates | nindent 4 }}
    {{- end }}
  {{- end }}
