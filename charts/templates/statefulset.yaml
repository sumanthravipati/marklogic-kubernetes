apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "marklogic.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "marklogic.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "marklogic.headlessServiceName" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  selector:
    matchLabels:
      {{- include "marklogic.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "marklogic.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "marklogic.serviceAccountName" . }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8}}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      {{- if ne .Values.bootstrapHostName "" }}
      initContainers: 
      - name: configure-group
        image: "{{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag }}"
        volumeMounts:
            - name: mladmin-secrets
              mountPath: /run/secrets/ml-secrets
              readOnly: true
        command:
          - sh
          - '-c'
          - |
            MARKLOGIC_ADMIN_USERNAME=`cat /run/secrets/ml-secrets/username`
            MARKLOGIC_ADMIN_PASSWORD=`cat /run/secrets/ml-secrets/password`
            log () {
                      local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
                      echo "${TIMESTAMP}  $@"
                    }
            log "Info: [initContainer] Begin configure-group execution"
            if [[ $POD_NAME != *-0 ]]; then
              log "Info: [initContainer] Skipping creation of group $MARKLOGIC_GROUP as $POD_NAME is not the first node in the group."
              exit 0
            fi
            HOST_RESP_CODE=`curl --anyauth -m 20 -s -o /dev/null -w "%{http_code}" -X GET http://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/hosts --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD}`
            if [[ ${HOST_RESP_CODE} -ne 200 ]]; then
              log "Error: [initContainer] Bootstrap host $MARKLOGIC_BOOTSTRAP_HOST not found, exiting Init container."
              exit 1
            fi
            GROUP_CFG_TEMPLATE='{"group-name":"%s", "xdqp-ssl-enabled":"%s"}'
            GROUP_CFG=$(printf "$GROUP_CFG_TEMPLATE" "$MARKLOGIC_GROUP" "$XDQP_SSL_ENABLED") 
            GROUP_RESP_CODE=`curl --anyauth -m 20 -s -o /dev/null -w "%{http_code}" -X GET http://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/groups/${MARKLOGIC_GROUP} --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD}`
            if [[ ${GROUP_RESP_CODE} -eq 200 ]]; then
              log "Info: [initContainer] Skipping creation of group $MARKLOGIC_GROUP as it already exists on the MarkLogic cluster." 
              exit 0
            fi
            log "Info: [initContainer] Group $MARKLOGIC_GROUP does not exist, configuring group $MARKLOGIC_GROUP on the MarkLogic cluster."
            res_code=`curl --retry 5 --retry-all-errors --retry-max-time 60 --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD} -m 20 -s -w '%{http_code}' -X POST -d "${GROUP_CFG}" -H "Content-type: application/json" http://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/groups`
            if [[ ${res_code} -eq 201 ]]; then
              log "Info: [initContainer] Successfully configured group $MARKLOGIC_GROUP on the MarkLogic cluster."
            else
              log "Info: [initContainer] Expected response code 201, got $res_code"
              exit 1
            fi
            log "Info: [initContainer] Group $MARKLOGIC_GROUP has been created, configuring App-server App-Services in group $MARKLOGIC_GROUP on the MarkLogic cluster."
            res_code=`curl --retry 5 --retry-all-errors --retry-max-time 60 --anyauth --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD} -m 20 -s -w '%{http_code}' -X POST -d '{"server-name":"App-Services", "root":"/", "port":8000,"modules-database":"Modules", "content-database":"Documents", "error-handler":"/MarkLogic/rest-api/8000-error-handler.xqy", "url-rewriter":"/MarkLogic/rest-api/8000-rewriter.xml"}' -H "Content-type: application/json" "http://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/servers?group-id=${MARKLOGIC_GROUP}&server-type=http"`
            if [[ ${res_code} -eq 201 ]]; then
              log "Info: [initContainer] Successfully configured App-server App-Services into group $MARKLOGIC_GROUP on the MarkLogic cluster."
            else
              log "Info: [initContainer] Expected response code 201, got $res_code"
              exit 1
            fi                      
        env: 
        - name: MARKLOGIC_ADMIN_USERNAME_FILE
          value: "ml-secrets/username"
        - name: MARKLOGIC_ADMIN_PASSWORD_FILE
          value: "ml-secrets/password"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: {{ include "marklogic.fullname" . }}
      {{- end }}
      containers:
        - name: marklogic-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy}}
          volumeMounts:
            - name: datadir
              mountPath: /var/opt/MarkLogic
            {{- if .Values.additionalVolumeMounts }}
              {{- toYaml .Values.additionalVolumeMounts | nindent 12 }}
            {{- end }}
            - name: mladmin-secrets
              mountPath: /run/secrets/ml-secrets
              readOnly: true
          env:
            - name: MARKLOGIC_ADMIN_USERNAME_FILE
              value: "ml-secrets/username"
            - name: MARKLOGIC_ADMIN_PASSWORD_FILE
              value: "ml-secrets/password"
            {{- if .Values.auth.walletPassword }}
            - name: MARKLOGIC_WALLET_PASSWORD_FILE
              value: ml-secrets/wallet-password
            {{- end }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: INSTALL_CONVERTERS
              value: {{ .Values.enableConverters | quote }}
            - name: LICENSE_KEY
              value: {{ .Values.license.key | quote }}
            - name: LICENSEE
              value: {{ .Values.license.licensee | quote }}
            - name: REALM
              value: {{ .Values.realm  | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "marklogic.fullname" . }}
          ports:
            - name: health-check
              containerPort: 7997
              protocol: TCP
            - name: xdqp-port1
              containerPort: 7998
              protocol: TCP
            - name: xdqp-port2
              containerPort: 7999              
              protocol: TCP
            - name: app-services
              containerPort: 8000
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
            - name: manage
              containerPort: 8002
              protocol: TCP
            {{- if .Values.additionalContainerPorts }}
              {{- toYaml .Values.additionalContainerPorts | nindent 12 }}
            {{- end }}
          lifecycle:
            {{- if eq .Values.bootstrapHostName "" }}
            postStart:
              exec:
                command:
                  - bash
                  - '-c'
                  - |
                    MARKLOGIC_ADMIN_USERNAME="$(< /run/secrets/ml-secrets/username)"
                    MARKLOGIC_ADMIN_PASSWORD="$(< /run/secrets/ml-secrets/password)"

                    log () {
                      local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
                      pid=$(pgrep start.marklogic)
                      # Check to make sure pod doesn't terminate if PID value is empty for any reason
                      # If PID value is empty postStart hook logs are not recorded
                      if [ -n "$pid" ]; then
                          echo "${TIMESTAMP} $@" > /proc/$pid/fd/1
                      fi
                    }
                    log "Info: [poststart] Begin Poststart Hook Execution"
                    if [[ $POD_NAME != *-0 ]]; then
                      log "Info: [poststart] Skipping group configuration."
                    else
                      while [ ! -f /var/opt/MarkLogic/ready ]; do
                        log "[poststart] wait for marklogic server to be ready"
                        sleep 5s
                      done
                      sleep 10s
                      GROUP_CFG_TEMPLATE='{"group-name":"%s", "xdqp-ssl-enabled":"%s"}'
                      GROUP_CFG=$(printf "$GROUP_CFG_TEMPLATE" "$MARKLOGIC_GROUP" "$XDQP_SSL_ENABLED") 
                      log "Info: [poststart] Updating group configuration: ${GROUP_CFG}"
                      curl --anyauth -m 20 -X PUT -H "Content-type: application/json" -d "${GROUP_CFG}" http://${MARKLOGIC_BOOTSTRAP_HOST}:8002/manage/v2/groups/Default/properties --user ${MARKLOGIC_ADMIN_USERNAME}:${MARKLOGIC_ADMIN_PASSWORD}
                      sleep 2s
                    fi
                    log "Info: [poststart] Poststart Hook Execution Completed"
            {{- end }}
            preStop:
              exec:
                command:
                  - bash
                  - '-c'
                  - |
                    MARKLOGIC_ADMIN_USERNAME="$(< /run/secrets/ml-secrets/username)"
                    MARKLOGIC_ADMIN_PASSWORD="$(< /run/secrets/ml-secrets/password)"

                    log () {
                      local TIMESTAMP=$(date +"%Y-%m-%d %T.%3N")
                      # Check to make sure pod doesn't terminate if PID value is empty for any reason
                      # If PID value is empty preStart hook logs are not recorded
                      if [ -n "$pid" ]; then
                          echo "${TIMESTAMP} $@" > /proc/$pid/fd/1
                      fi
                    }

                    pid=$(pgrep start.marklogic)
                    log "Info: [prestop] Prestop Hook Execution"

                    my_host=$(hostname -f)

                    log "Info: [prestop] MarkLogic Pod Hostname: "$my_host

                    for ((i = 0; i < 5; i = i + 1)); do
                        res_code=$(curl --anyauth --user $MARKLOGIC_ADMIN_USERNAME:$MARKLOGIC_ADMIN_PASSWORD \
                            -o /dev/null -m 10 -s -w %{http_code} \
                            -i -X POST --data "state=shutdown&failover=true" \
                            -H "Content-type: application/x-www-form-urlencoded" \
                            http://localhost:8002/manage/v2/hosts/$my_host?format=json)

                        if [[ ${res_code} -eq 202 ]]; then
                            log "Info: [prestop] Host shut down response code: "$res_code

                            while (true)
                            do
                              ml_status=$(service MarkLogic status)
                              log "Info: [prestop] MarkLogic Status: "$ml_status
                              if [[ "$ml_status" =~ "running" ]]; then
                                  sleep 5s
                                  continue
                              else
                                  break
                              fi
                            done
                            break
                        else
                            log "ERROR: [prestop] Retry Attempt: "$i
                            log "ERROR: [prestop] Host shut down expected response code 202, got "$res_code
                            sleep 10s
                        fi
                    done
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: health-check
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - ls
                - /var/opt/MarkLogic/ready
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.logCollection.enabled }}
        - name: fluent-bit
          image: {{ .Values.logCollection.image }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: datadir
              mountPath: /var/opt/MarkLogic
            {{- if .Values.additionalVolumeMounts }}
              {{- toYaml .Values.additionalVolumeMounts | nindent 12 }}
            {{- end }}
            - name: {{ include "marklogic.fullname" . }}-fb-config-map
              mountPath: /fluent-bit/etc/
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources: {{- toYaml .Values.logCollection.resources | nindent 12 }}
        {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8}}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      volumes:
        - name: mladmin-secrets
          secret:
            secretName: {{ include "marklogic.authSecretNameToMount" . }}
        {{- if .Values.logCollection.enabled }}
        - name: {{ include "marklogic.fullname" . }}-fb-config-map
          configMap:
            name: {{ include "marklogic.fullname" . }}-fb-config-map
        {{- end }}
        {{- if not .Values.persistence.enabled }}
        - name: datadir
          emptyDir: {}
        {{- end }}
        {{- if .Values.additionalVolumes }}
        {{- toYaml .Values.additionalVolumes | nindent 8 }}
        {{- end }}
  {{- if or .Values.persistence.enabled .Values.additionalVolumeClaimTemplates }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        labels: 
          {{- include "marklogic.selectorLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote}}
          {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end}}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
    {{- if .Values.additionalVolumeClaimTemplates }}
    {{- toYaml .Values.additionalVolumeClaimTemplates | nindent 4 }}
    {{- end }}
  {{- end }}